declare module'node:http'{export*from'http';}declare module'http'{import*as stream from'node:stream';import{URL}from'node:url';import{Socket,Server as NetServer}from'node:net';interface IncomingHttpHeaders extends NodeJS.Dict<string|string[]>{'accept'?:string;'accept-language'?:string;'accept-patch'?:string;'accept-ranges'?:string;'access-control-allow-credentials'?:string;'access-control-allow-headers'?:string;'access-control-allow-methods'?:string;'access-control-allow-origin'?:string;'access-control-expose-headers'?:string;'access-control-max-age'?:string;'access-control-request-headers'?:string;'access-control-request-method'?:string;'age'?:string;'allow'?:string;'alt-svc'?:string;'authorization'?:string;'cache-control'?:string;'connection'?:string;'content-disposition'?:string;'content-encoding'?:string;'content-language'?:string;'content-length'?:string;'content-location'?:string;'content-range'?:string;'content-type'?:string;'cookie'?:string;'date'?:string;'expect'?:string;'expires'?:string;'forwarded'?:string;'from'?:string;'host'?:string;'if-match'?:string;'if-modified-since'?:string;'if-none-match'?:string;'if-unmodified-since'?:string;'last-modified'?:string;'location'?:string;'origin'?:string;'pragma'?:string;'proxy-authenticate'?:string;'proxy-authorization'?:string;'public-key-pins'?:string;'range'?:string;'referer'?:string;'retry-after'?:string;'sec-websocket-accept'?:string;'sec-websocket-extensions'?:string;'sec-websocket-key'?:string;'sec-websocket-protocol'?:string;'sec-websocket-version'?:string;'set-cookie'?:string[];'strict-transport-security'?:string;'tk'?:string;'trailer'?:string;'transfer-encoding'?:string;'upgrade'?:string;'user-agent'?:string;'vary'?:string;'via'?:string;'warning'?:string;'www-authenticate'?:string;}type OutgoingHttpHeader=number|string|string[];interface OutgoingHttpHeaders extends NodeJS.Dict<OutgoingHttpHeader>{}interface ClientRequestArgs{protocol?:string|null;host?:string|null;hostname?:string|null;family?:number;port?:number|string|null;defaultPort?:number|string;localAddress?:string;socketPath?:string;maxHeaderSize?:number;method?:string;path?:string|null;headers?:OutgoingHttpHeaders;auth?:string|null;agent?:Agent|boolean;_defaultAgent?:Agent;timeout?:number;setHost?:boolean;createConnection?:(options:ClientRequestArgs,oncreate:(err:Error,socket:Socket)=>void)=>Socket;}interface ServerOptions{IncomingMessage?:typeof IncomingMessage;ServerResponse?:typeof ServerResponse;maxHeaderSize?:number;insecureHTTPParser?:boolean;}type RequestListener=(req:IncomingMessage,res:ServerResponse)=>void;interface HttpBase{setTimeout(msecs?:number,callback?:()=>void):this;setTimeout(callback:()=>void):this;maxHeadersCount:number|null;timeout:number;headersTimeout:number;keepAliveTimeout:number;requestTimeout:number;}interface Server extends HttpBase{}class Server extends NetServer{constructor(requestListener?:RequestListener);constructor(options:ServerOptions,requestListener?:RequestListener);}class OutgoingMessage extends stream.Writable{upgrading:boolean;chunkedEncoding:boolean;shouldKeepAlive:boolean;useChunkedEncodingByDefault:boolean;sendDate:boolean;finished:boolean;headersSent:boolean;connection:Socket|null;socket:Socket|null;constructor();setTimeout(msecs:number,callback?:()=>void):this;setHeader(name:string,value:number|string|ReadonlyArray<string>):void;getHeader(name:string):number|string|string[]|undefined;getHeaders():OutgoingHttpHeaders;getHeaderNames():string[];hasHeader(name:string):boolean;removeHeader(name:string):void;addTrailers(headers:OutgoingHttpHeaders|ReadonlyArray<[string,string]>):void;flushHeaders():void;}class ServerResponse extends OutgoingMessage{statusCode:number;statusMessage:string;constructor(req:IncomingMessage);assignSocket(socket:Socket):void;detachSocket(socket:Socket):void;writeContinue(callback?:()=>void):void;writeHead(statusCode:number,reasonPhrase?:string,headers?:OutgoingHttpHeaders|OutgoingHttpHeader[]):this;writeHead(statusCode:number,headers?:OutgoingHttpHeaders|OutgoingHttpHeader[]):this;writeProcessing():void;}interface InformationEvent{statusCode:number;statusMessage:string;httpVersion:string;httpVersionMajor:number;httpVersionMinor:number;headers:IncomingHttpHeaders;rawHeaders:string[];}class ClientRequest extends OutgoingMessage{aborted:boolean;host:string;protocol:string;constructor(url:string|URL|ClientRequestArgs,cb?:(res:IncomingMessage)=>void);method:string;path:string;abort():void;onSocket(socket:Socket):void;setTimeout(timeout:number,callback?:()=>void):this;setNoDelay(noDelay?:boolean):void;setSocketKeepAlive(enable?:boolean,initialDelay?:number):void;addListener(event:'abort',listener:()=>void):this;addListener(event:'connect',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;addListener(event:'continue',listener:()=>void):this;addListener(event:'information',listener:(info:InformationEvent)=>void):this;addListener(event:'response',listener:(response:IncomingMessage)=>void):this;addListener(event:'socket',listener:(socket:Socket)=>void):this;addListener(event:'timeout',listener:()=>void):this;addListener(event:'upgrade',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;addListener(event:'close',listener:()=>void):this;addListener(event:'drain',listener:()=>void):this;addListener(event:'error',listener:(err:Error)=>void):this;addListener(event:'finish',listener:()=>void):this;addListener(event:'pipe',listener:(src:stream.Readable)=>void):this;addListener(event:'unpipe',listener:(src:stream.Readable)=>void):this;addListener(event:string|symbol,listener:(...args:any[])=>void):this;on(event:'abort',listener:()=>void):this;on(event:'connect',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;on(event:'continue',listener:()=>void):this;on(event:'information',listener:(info:InformationEvent)=>void):this;on(event:'response',listener:(response:IncomingMessage)=>void):this;on(event:'socket',listener:(socket:Socket)=>void):this;on(event:'timeout',listener:()=>void):this;on(event:'upgrade',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;on(event:'close',listener:()=>void):this;on(event:'drain',listener:()=>void):this;on(event:'error',listener:(err:Error)=>void):this;on(event:'finish',listener:()=>void):this;on(event:'pipe',listener:(src:stream.Readable)=>void):this;on(event:'unpipe',listener:(src:stream.Readable)=>void):this;on(event:string|symbol,listener:(...args:any[])=>void):this;once(event:'abort',listener:()=>void):this;once(event:'connect',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;once(event:'continue',listener:()=>void):this;once(event:'information',listener:(info:InformationEvent)=>void):this;once(event:'response',listener:(response:IncomingMessage)=>void):this;once(event:'socket',listener:(socket:Socket)=>void):this;once(event:'timeout',listener:()=>void):this;once(event:'upgrade',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;once(event:'close',listener:()=>void):this;once(event:'drain',listener:()=>void):this;once(event:'error',listener:(err:Error)=>void):this;once(event:'finish',listener:()=>void):this;once(event:'pipe',listener:(src:stream.Readable)=>void):this;once(event:'unpipe',listener:(src:stream.Readable)=>void):this;once(event:string|symbol,listener:(...args:any[])=>void):this;prependListener(event:'abort',listener:()=>void):this;prependListener(event:'connect',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;prependListener(event:'continue',listener:()=>void):this;prependListener(event:'information',listener:(info:InformationEvent)=>void):this;prependListener(event:'response',listener:(response:IncomingMessage)=>void):this;prependListener(event:'socket',listener:(socket:Socket)=>void):this;prependListener(event:'timeout',listener:()=>void):this;prependListener(event:'upgrade',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;prependListener(event:'close',listener:()=>void):this;prependListener(event:'drain',listener:()=>void):this;prependListener(event:'error',listener:(err:Error)=>void):this;prependListener(event:'finish',listener:()=>void):this;prependListener(event:'pipe',listener:(src:stream.Readable)=>void):this;prependListener(event:'unpipe',listener:(src:stream.Readable)=>void):this;prependListener(event:string|symbol,listener:(...args:any[])=>void):this;prependOnceListener(event:'abort',listener:()=>void):this;prependOnceListener(event:'connect',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;prependOnceListener(event:'continue',listener:()=>void):this;prependOnceListener(event:'information',listener:(info:InformationEvent)=>void):this;prependOnceListener(event:'response',listener:(response:IncomingMessage)=>void):this;prependOnceListener(event:'socket',listener:(socket:Socket)=>void):this;prependOnceListener(event:'timeout',listener:()=>void):this;prependOnceListener(event:'upgrade',listener:(response:IncomingMessage,socket:Socket,head:Buffer)=>void):this;prependOnceListener(event:'close',listener:()=>void):this;prependOnceListener(event:'drain',listener:()=>void):this;prependOnceListener(event:'error',listener:(err:Error)=>void):this;prependOnceListener(event:'finish',listener:()=>void):this;prependOnceListener(event:'pipe',listener:(src:stream.Readable)=>void):this;prependOnceListener(event:'unpipe',listener:(src:stream.Readable)=>void):this;prependOnceListener(event:string|symbol,listener:(...args:any[])=>void):this;}class IncomingMessage extends stream.Readable{constructor(socket:Socket);aborted:boolean;httpVersion:string;httpVersionMajor:number;httpVersionMinor:number;complete:boolean;connection:Socket;socket:Socket;headers:IncomingHttpHeaders;rawHeaders:string[];trailers:NodeJS.Dict<string>;rawTrailers:string[];setTimeout(msecs:number,callback?:()=>void):this;method?:string;url?:string;statusCode?:number;statusMessage?:string;destroy(error?:Error):void;}interface AgentOptions{keepAlive?:boolean;keepAliveMsecs?:number;maxSockets?:number;maxTotalSockets?:number;maxFreeSockets?:number;timeout?:number;scheduling?:'fifo'|'lifo';}class Agent{maxFreeSockets:number;maxSockets:number;maxTotalSockets:number;readonly freeSockets:NodeJS.ReadOnlyDict<Socket[]>;readonly sockets:NodeJS.ReadOnlyDict<Socket[]>;readonly requests:NodeJS.ReadOnlyDict<IncomingMessage[]>;constructor(opts?:AgentOptions);destroy():void;}const METHODS:string[];const STATUS_CODES:{[errorCode:number]:string|undefined;[errorCode:string]:string|undefined;};function createServer(requestListener?:RequestListener):Server;function createServer(options:ServerOptions,requestListener?:RequestListener):Server;interface RequestOptions extends ClientRequestArgs{}function request(options:RequestOptions|string|URL,callback?:(res:IncomingMessage)=>void):ClientRequest;function request(url:string|URL,options:RequestOptions,callback?:(res:IncomingMessage)=>void):ClientRequest;function get(options:RequestOptions|string|URL,callback?:(res:IncomingMessage)=>void):ClientRequest;function get(url:string|URL,options:RequestOptions,callback?:(res:IncomingMessage)=>void):ClientRequest;let globalAgent:Agent;const maxHeaderSize:number;}